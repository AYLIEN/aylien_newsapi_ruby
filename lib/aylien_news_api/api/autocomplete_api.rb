=begin
#AYLIEN News API

#The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 

The version of the OpenAPI document: 3.0
Contact: support@aylien.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.3-SNAPSHOT

=end

require 'cgi'

module AylienNewsApi
  class AutocompleteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List autocompletes
    # The autocompletes endpoint a string of characters provided to it, and then returns suggested terms that are the most likely full words or strings. The terms returned by the News API are based on parameters the type parameters you can see below. For example, if you provide the autocompletes endpoint with the term `New York C` and select the type `dbpedia_resources`, the API will return links to the DBpedia resources `New_York_City`, `New_York_City_Subway`, `New_York_City_Police_Department`, and so on. 
    # @param type [String] This parameter is used for defining the type of autocompletes. 
    # @param term [String] This parameter is used for finding autocomplete objects that contain the specified value. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language This parameter is used for autocompletes whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (default to 'en')
    # @option opts [Integer] :per_page This parameter is used for specifying number of items in each page.  (default to 3)
    # @return [Autocompletes]
    def list_autocompletes(type, term, opts = {})
      data, _status_code, _headers = list_autocompletes_with_http_info(type, term, opts)
      data
    end

    # List autocompletes
    # The autocompletes endpoint a string of characters provided to it, and then returns suggested terms that are the most likely full words or strings. The terms returned by the News API are based on parameters the type parameters you can see below. For example, if you provide the autocompletes endpoint with the term &#x60;New York C&#x60; and select the type &#x60;dbpedia_resources&#x60;, the API will return links to the DBpedia resources &#x60;New_York_City&#x60;, &#x60;New_York_City_Subway&#x60;, &#x60;New_York_City_Police_Department&#x60;, and so on. 
    # @param type [String] This parameter is used for defining the type of autocompletes. 
    # @param term [String] This parameter is used for finding autocomplete objects that contain the specified value. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language This parameter is used for autocompletes whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
    # @option opts [Integer] :per_page This parameter is used for specifying number of items in each page. 
    # @return [Array<(Autocompletes, Integer, Hash)>] Autocompletes data, response status code and response headers
    def list_autocompletes_with_http_info(type, term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutocompleteApi.list_autocompletes ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AutocompleteApi.list_autocompletes"
      end
      # verify enum value
      allowable_values = ["source_names", "source_domains", "entity_types", "dbpedia_resources"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling AutocompleteApi.list_autocompletes"
      end
      if @api_client.config.client_side_validation && term.to_s.length < 1
        fail ArgumentError, 'invalid value for "term" when calling AutocompleteApi.list_autocompletes, the character length must be great than or equal to 1.'
      end

      allowable_values = ["en", "de", "fr", "it", "es", "pt"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling AutocompleteApi.list_autocompletes, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling AutocompleteApi.list_autocompletes, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/autocompletes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'term'] = term
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Autocompletes' 

      # auth_names
      auth_names = opts[:auth_names] || ['app_id', 'app_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutocompleteApi#list_autocompletes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
